#include <eepp/ui/doc/languages/d.hpp>
#include <eepp/ui/doc/syntaxdefinitionmanager.hpp>

namespace EE { namespace UI { namespace Doc { namespace Language {

void addD() {

	auto& sd = SyntaxDefinitionManager::instance()->add(

		{ "D",
		  { "%.d$", "%.di$" },
		  {
			  { { "//.-\n" }, "comment" },
			  { { "/%*", "%*/" }, "comment" },
			  { { "/%+", "%+/" }, "comment" },
			  { { "`", "`", "\\" }, "string" },
			  { { "\"", "\"", "\\" }, "string" },
			  { { "'", "'", "\\" }, "string" },
			  { { "-?0x%x+" }, "number" },
			  { { "-?%d+[%d%.eE]*f?" }, "number" },
			  { { "-?%.?%d+f?" }, "number" },
			  { { "[%+%-=/%*%^%%<>!~|&%$]+" }, "operator" },
			  { { "[%a_][%w_]*!" }, "function" },
			  { { "[%a_][%w_]*" }, "symbol" },
			  { { "@safe" }, "keyword" },
			  { { "@trusted" }, "keyword" },
			  { { "@nogc" }, "keyword" },

		  },
		  {
			  { "new", "keyword" },
			  { "invariant", "keyword" },
			  { "static", "keyword" },
			  { "module", "keyword" },
			  { "mixin", "keyword" },
			  { "interface", "keyword" },
			  { "catch", "keyword" },
			  { "macro", "keyword" },
			  { "package", "keyword" },
			  { "ireal", "keyword2" },
			  { "foreach", "keyword" },
			  { "int", "keyword2" },
			  { "immutable", "keyword" },
			  { "final", "keyword" },
			  { "ifloat", "keyword2" },
			  { "lazy", "keyword" },
			  { "do", "keyword" },
			  { "goto", "keyword" },
			  { "__parameters", "keyword" },
			  { "function", "keyword" },
			  { "delegate", "keyword" },
			  { "import", "keyword" },
			  { "long", "keyword2" },
			  { "continue", "keyword" },
			  { "idouble", "keyword2" },
			  { "ref", "keyword" },
			  { "for", "keyword" },
			  { "float", "keyword2" },
			  { "version", "keyword" },
			  { "finally", "keyword" },
			  { "if", "keyword" },
			  { "extern", "keyword" },
			  { "in", "keyword" },
			  { "break", "keyword" },
			  { "else", "keyword" },
			  { "__vector", "keyword" },
			  { "false", "literal" },
			  { "export", "keyword" },
			  { "byte", "keyword2" },
			  { "enum", "keyword" },
			  { "cast", "keyword" },
			  { "case", "keyword" },
			  { "auto", "keyword" },
			  { "null", "literal" },
			  { "__MODULE__", "keyword" },
			  { "asm", "keyword" },
			  { "double", "keyword2" },
			  { "default", "keyword" },
			  { "inout", "keyword" },
			  { "pragma", "keyword" },
			  { "while", "keyword" },
			  { "protected", "keyword" },
			  { "pure", "keyword" },
			  { "scope", "keyword" },
			  { "override", "keyword" },
			  { "shared", "keyword" },
			  { "real", "keyword2" },
			  { "short", "keyword2" },
			  { "struct", "keyword" },
			  { "uint", "keyword2" },
			  { "return", "keyword" },
			  { "super", "keyword" },
			  { "throw", "keyword" },
			  { "__traits", "keyword" },
			  { "ubyte", "keyword2" },
			  { "true", "literal" },
			  { "__FUNCTION__", "keyword" },
			  { "this", "keyword" },
			  { "__FILE_FULL_PATH__", "keyword" },
			  { "void", "keyword" },
			  { "__FILE__", "keyword" },
			  { "switch", "keyword" },
			  { "ucent", "keyword2" },
			  { "ushort", "keyword2" },
			  { "with", "keyword" },
			  { "typeof", "keyword" },
			  { "typeid", "keyword" },
			  { "ulong", "keyword2" },
			  { "out", "keyword" },
			  { "nothrow", "keyword" },
			  { "char", "keyword2" },
			  { "synchronized", "keyword" },
			  { "debug", "keyword" },
			  { "assert", "keyword" },
			  { "foreach_reverse", "keyword" },
			  { "unittest", "keyword" },
			  { "dchar", "keyword2" },
			  { "__PRETTY_FUNCTION__", "keyword" },
			  { "class", "keyword" },
			  { "cent", "keyword2" },
			  { "align", "keyword" },
			  { "__LINE__", "keyword" },
			  { "cdouble", "keyword2" },
			  { "abstract", "keyword" },
			  { "__gshared", "keyword" },
			  { "alias", "keyword" },
			  { "deprecated", "keyword" },
			  { "body", "keyword" },
			  { "wchar", "keyword2" },
			  { "template", "keyword" },
			  { "is", "keyword" },
			  { "private", "keyword" },
			  { "creal", "keyword2" },
			  { "cfloat", "keyword2" },
			  { "try", "keyword" },
			  { "bool", "keyword2" },
			  { "public", "keyword" },
			  { "union", "keyword" },
			  { "const", "keyword" },

		  },
		  "//",
		  {}

		} );

	sd.setFoldRangeType( FoldRangeType::Braces ).setFoldBraces( { { '{', '}' } } );
}

}}}} // namespace EE::UI::Doc::Language

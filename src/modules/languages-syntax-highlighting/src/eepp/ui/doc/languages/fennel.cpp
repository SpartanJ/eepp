#include <eepp/ui/doc/languages/fennel.hpp>
#include <eepp/ui/doc/syntaxdefinitionmanager.hpp>

namespace EE { namespace UI { namespace Doc { namespace Language {

void addFennel() {

	SyntaxDefinitionManager::instance()->add(

		{ "Fennel",
		  { "%.fnl$" },
		  {
			  { { ";.-\n" }, "comment" },
			  { { "\"", "\"", "\\" }, "string" },
			  { { "0x[%da-fA-F]+" }, "number" },
			  { { "-?%d+[%d%.]*" }, "number" },
			  { { "-?%.?%d+" }, "number" },
			  { { "%f[^(][^()'%s\"]+" }, "function" },
			  { { "[^()'%s\"]+" }, "symbol" },

		  },
		  {
			  { "math.cos", "keyword2" },
			  { "coroutine", "keyword2" },
			  { "pcall", "keyword2" },
			  { "bit32.rrotate", "keyword2" },
			  { "math.max", "keyword2" },
			  { "=", "keyword" },
			  { "string.upper", "keyword2" },
			  { "debug.getmetatable", "keyword2" },
			  { "os.time", "keyword2" },
			  { "os.difftime", "keyword2" },
			  { "string.char", "keyword2" },
			  { "debug.getregistry", "keyword2" },
			  { "string.format", "keyword2" },
			  { "-", "keyword" },
			  { "->>", "keyword" },
			  { "math", "keyword2" },
			  { "io.lines", "keyword2" },
			  { "import-macros", "keyword2" },
			  { "string.sub", "keyword2" },
			  { "while", "keyword2" },
			  { "select", "keyword2" },
			  { "math.log", "keyword2" },
			  { "debug.gethook", "keyword2" },
			  { "eval-compiler", "keyword2" },
			  { "collect", "keyword2" },
			  { "when", "keyword2" },
			  { "rshift", "keyword2" },
			  { "tset", "keyword2" },
			  { "math.ldexp", "keyword2" },
			  { "#", "keyword" },
			  { "or", "keyword2" },
			  { "let", "keyword2" },
			  { "os.execute", "keyword2" },
			  { "coroutine.resume", "keyword2" },
			  { "table.maxn", "keyword2" },
			  { "coroutine.wrap", "keyword2" },
			  { "dofile", "keyword2" },
			  { "math.deg", "keyword2" },
			  { "debug.setlocal", "keyword2" },
			  { "each", "keyword2" },
			  { "include", "keyword2" },
			  { "//", "keyword" },
			  { "table", "keyword2" },
			  { "os", "keyword2" },
			  { "math.atan", "keyword2" },
			  { "error", "keyword2" },
			  { "io.read", "keyword2" },
			  { "rawset", "keyword2" },
			  { "io.write", "keyword2" },
			  { "os.setlocale", "keyword2" },
			  { "fcollect", "keyword2" },
			  { "tostring", "keyword2" },
			  { "unpack", "keyword2" },
			  { "table.insert", "keyword2" },
			  { "values", "keyword2" },
			  { "setmetatable", "keyword2" },
			  { "assert", "keyword2" },
			  { "bxor", "keyword2" },
			  { "macros", "keyword2" },
			  { "io.tmpfile", "keyword2" },
			  { "io.popen", "keyword2" },
			  { "io.flush", "keyword2" },
			  { "os.rename", "keyword2" },
			  { "package.seeall", "keyword2" },
			  { "..", "keyword" },
			  { ":", "keyword" },
			  { "debug.getupvalue", "keyword2" },
			  { "do", "keyword2" },
			  { "/", "keyword" },
			  { "string.lower", "keyword2" },
			  { "math.randomseed", "keyword2" },
			  { "debug.getlocal", "keyword2" },
			  { "debug.upvaluejoin", "keyword2" },
			  { "-?>", "keyword" },
			  { "bit32.arshift", "keyword2" },
			  { "debug.debug", "keyword2" },
			  { "math.asin", "keyword2" },
			  { "math.sqrt", "keyword2" },
			  { "math.acos", "keyword2" },
			  { "loadfile", "keyword2" },
			  { "_G", "keyword" },
			  { "string.rep", "keyword2" },
			  { "coroutine.create", "keyword2" },
			  { "io.output", "keyword2" },
			  { "next", "keyword2" },
			  { "os.exit", "keyword2" },
			  { "os.getenv", "keyword2" },
			  { "string", "keyword2" },
			  { "math.pow", "keyword2" },
			  { "io.open", "keyword2" },
			  { "macro", "keyword2" },
			  { "math.frexp", "keyword2" },
			  { "debug.getinfo", "keyword2" },
			  { "string.gmatch", "keyword2" },
			  { "bit32.bxor", "keyword2" },
			  { "%", "keyword" },
			  { "lambda", "keyword2" },
			  { "math.modf", "keyword2" },
			  { "getmetatable", "keyword2" },
			  { "var", "keyword2" },
			  { "<", "keyword" },
			  { "os.clock", "keyword2" },
			  { "length", "keyword2" },
			  { "table.sort", "keyword2" },
			  { "math.exp", "keyword2" },
			  { "debug.upvalueid", "keyword2" },
			  { "pairs", "keyword2" },
			  { "os.remove", "keyword2" },
			  { "coroutine.yield", "keyword2" },
			  { "bit32", "keyword2" },
			  { "not", "keyword2" },
			  { "bit32.rshift", "keyword2" },
			  { "debug.setupvalue", "keyword2" },
			  { "coroutine.status", "keyword2" },
			  { "math.cosh", "keyword2" },
			  { "lua", "keyword2" },
			  { "type", "keyword2" },
			  { "debug", "keyword2" },
			  { "debug.setmetatable", "keyword2" },
			  { "math.min", "keyword2" },
			  { "bit32.band", "keyword2" },
			  { "table.pack", "keyword2" },
			  { "io.input", "keyword2" },
			  { "math.log10", "keyword2" },
			  { "partial", "keyword2" },
			  { "+", "keyword" },
			  { "string.match", "keyword2" },
			  { "bit32.extract", "keyword2" },
			  { "math.floor", "keyword2" },
			  { "xpcall", "keyword2" },
			  { "string.find", "keyword2" },
			  { "match", "keyword2" },
			  { "math.ceil", "keyword2" },
			  { "for", "keyword2" },
			  { "bor", "keyword2" },
			  { "math.tan", "keyword2" },
			  { ">=", "keyword" },
			  { "string.len", "keyword2" },
			  { ".", "keyword" },
			  { "string.byte", "keyword2" },
			  { "table.concat", "keyword2" },
			  { "bnot", "keyword2" },
			  { "string.gsub", "keyword2" },
			  { "icollect", "keyword2" },
			  { "match-try", "keyword2" },
			  { "package.loadlib", "keyword2" },
			  { "band", "keyword2" },
			  { "comment", "keyword2" },
			  { "math.fmod", "keyword2" },
			  { "pick-values", "keyword2" },
			  { "macrodebug", "keyword2" },
			  { "io.close", "keyword2" },
			  { "bit32.bnot", "keyword2" },
			  { "pick-args", "keyword2" },
			  { "math.sin", "keyword2" },
			  { "module", "keyword2" },
			  { "true", "literal" },
			  { "math.abs", "keyword2" },
			  { "Î»", "keyword" },
			  { "not=", "keyword2" },
			  { "require", "keyword2" },
			  { "hashfn", "keyword2" },
			  { "<=", "keyword" },
			  { "fn", "keyword2" },
			  { "doto", "keyword2" },
			  { "coroutine.running", "keyword2" },
			  { "set-forcibly!", "keyword2" },
			  { "debug.traceback", "keyword2" },
			  { "bit32.lshift", "keyword2" },
			  { "rawlen", "keyword2" },
			  { "?.", "keyword" },
			  { "set", "keyword2" },
			  { "load", "keyword2" },
			  { "arg", "keyword2" },
			  { "io", "keyword2" },
			  { "rawget", "keyword2" },
			  { "false", "literal" },
			  { "string.dump", "keyword2" },
			  { "bit32.lrotate", "keyword2" },
			  { "math.rad", "keyword2" },
			  { "global", "keyword2" },
			  { "print", "keyword2" },
			  { "math.random", "keyword2" },
			  { "table.remove", "keyword2" },
			  { "os.tmpname", "keyword2" },
			  { "debug.sethook", "keyword2" },
			  { "ipairs", "keyword2" },
			  { "bit32.replace", "keyword2" },
			  { "package.searchpath", "keyword2" },
			  { "^", "keyword" },
			  { "if", "keyword2" },
			  { "->", "keyword" },
			  { "*", "keyword" },
			  { "math.tanh", "keyword2" },
			  { "debug.setuservalue", "keyword2" },
			  { ">", "keyword" },
			  { "string.reverse", "keyword2" },
			  { "and", "keyword2" },
			  { "require-macros", "keyword2" },
			  { "lshift", "keyword2" },
			  { "bit32.bor", "keyword2" },
			  { "loadstring", "keyword2" },
			  { "quote", "keyword2" },
			  { "bit32.btest", "keyword2" },
			  { "rawequal", "keyword2" },
			  { "accumulate", "keyword2" },
			  { "math.atan2", "keyword2" },
			  { "debug.getuservalue", "keyword2" },
			  { "table.unpack", "keyword2" },
			  { "collectgarbage", "keyword2" },
			  { "tonumber", "keyword2" },
			  { "package", "keyword2" },
			  { "math.sinh", "keyword2" },
			  { "nil", "literal" },
			  { "-?>>", "keyword" },
			  { "os.date", "keyword2" },
			  { "local", "keyword2" },
			  { "with-open", "keyword2" },
			  { "~=", "keyword" },
			  { "io.type", "keyword2" },

		  },
		  ";",
		  {}

		} );
}

}}}} // namespace EE::UI::Doc::Language

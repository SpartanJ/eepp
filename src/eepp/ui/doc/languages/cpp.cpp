#include <eepp/ui/doc/languages/cpp.hpp>
#include <eepp/ui/doc/syntaxdefinitionmanager.hpp>

namespace EE { namespace UI { namespace Doc { namespace Language {

void addCPP() {

	SyntaxDefinitionManager::instance()->add(

		{ "C++",
		  { "%.cpp$", "%.cc$", "%.cxx$", "%.c++$", "%.hh$", "%.inl$", "%.hxx$", "%.hpp$",
			"%.h++$" },
		  {
			  { { "R%\"xml%(", "%)xml%\"" }, "function", "XML" },
			  { { "R%\"css%(", "%)css%\"" }, "function", "CSS" },
			  { { "R%\"html%(", "%)html%\"" }, "function", "HTML" },
			  { { "R%\"json%(", "%)json%\"" }, "function", "JSON" },
			  { { "R\"[%a-\"]+%(", "%)[%a-\"]+%\"" }, "string" },
			  { { "R\"%(", "%)\"" }, "string" },
			  { { "//.-\n" }, "comment" },
			  { { "/%*", "%*/" }, "comment" },
			  { { "\"", "[\"\n]", "\\" }, "string" },
			  { { "'", "'", "\\" }, "string" },
			  { { "^%s*(#include)%s+([<%\"][%w%d%.%\\%/%_%-]+[>%\"])" },
				{ "keyword", "keyword", "literal" } },
			  { { "^%s*(#e?l?n?d?ifn?d?e?f?)%s+" }, { "keyword", "keyword", "literal" } },
			  { { "^%s*(#define)%s*" }, { "keyword", "keyword", "literal" } },
			  { { "^%s*(#else)%s*" }, { "keyword", "keyword", "literal" } },
			  { { "^%s*#", "[^\\]\n" }, "comment" },
			  { { "-?0x%x+" }, "number" },
			  { { "-?%d+[%d%.eE]*f?" }, "number" },
			  { { "-?%.?%d+f?" }, "number" },
			  { { "[%+%-=/%*%^%%<>!~|&]" }, "operator" },
			  { { "[%a_][%w_]*%f[(]" }, "function" },
			  { { "std%:%:[%w_]*" }, "keyword2" },
			  { { "[%a_][%w_]*" }, "symbol" },

		  },
		  {
			  { "int", "keyword2" },		 { "then", "keyword" },
			  { "new", "keyword" },			 { "reinterpret_cast", "keyword" },
			  { "this", "keyword" },		 { "long", "keyword2" },
			  { "Uint64", "keyword2" },		 { "Vector2i", "keyword2" },
			  { "String", "keyword2" },		 { "Int8", "keyword2" },
			  { "short", "keyword2" },		 { "nullptr", "keyword" },
			  { "dynamic_cast", "keyword" }, { "for", "keyword" },
			  { "goto", "keyword" },		 { "while", "keyword" },
			  { "const", "keyword" },		 { "enum", "keyword" },
			  { "break", "keyword" },		 { "Uint32", "keyword2" },
			  { "Uint8", "keyword2" },		 { "or", "keyword" },
			  { "compl", "keyword" },		 { "char8_t", "keyword2" },
			  { "friend", "keyword" },		 { "alignof", "keyword" },
			  { "volatile", "keyword" },	 { "noexcept", "keyword" },
			  { "decltype", "keyword" },	 { "auto", "keyword2" },
			  { "constinit", "keyword" },	 { "class", "keyword" },
			  { "constexpr", "keyword" },	 { "void", "keyword" },
			  { "char16_t", "keyword2" },	 { "static", "keyword" },
			  { "inline", "keyword" },		 { "typedef", "keyword" },
			  { "const_cast", "keyword" },	 { "co_return", "keyword" },
			  { "throw", "keyword" },		 { "true", "keyword2" },
			  { "float", "keyword2" },		 { "Vector2f", "keyword2" },
			  { "bitand", "keyword" },		 { "size_t", "keyword2" },
			  { "Uint16", "keyword2" },		 { "case", "keyword" },
			  { "mutable", "keyword" },		 { "protected", "keyword" },
			  { "do", "keyword" },			 { "continue", "keyword" },
			  { "asm", "keyword" },			 { "default", "keyword" },
			  { "Recti", "keyword2" },		 { "char", "keyword2" },
			  { "bool", "keyword2" },		 { "Rectf", "keyword2" },
			  { "requires", "keyword" },	 { "extern", "keyword" },
			  { "not_eq", "keyword" },		 { "static_cast", "keyword" },
			  { "namespace", "keyword" },	 { "union", "keyword" },
			  { "xor", "keyword" },			 { "Int64", "keyword2" },
			  { "false", "keyword2" },		 { "int32_t", "keyword2" },
			  { "int16_t", "keyword2" },	 { "uint16_t", "keyword2" },
			  { "concept", "keyword" },		 { "typename", "keyword" },
			  { "else", "keyword" },		 { "co_yield", "keyword" },
			  { "uint32_t", "keyword2" },	 { "operator", "keyword" },
			  { "Int32", "keyword2" },		 { "struct", "keyword" },
			  { "if", "keyword" },			 { "and_eq", "keyword" },
			  { "Int16", "keyword2" },		 { "xor_eq", "keyword" },
			  { "elseif", "keyword" },		 { "public", "keyword" },
			  { "virtual", "keyword" },		 { "unsigned", "keyword2" },
			  { "and", "keyword" },			 { "Float", "keyword2" },
			  { "private", "keyword" },		 { "or_eq", "keyword" },
			  { "switch", "keyword" },		 { "using", "keyword" },
			  { "double", "keyword2" },		 { "typeid", "keyword" },
			  { "delete", "keyword" },		 { "return", "keyword" },
			  { "NULL", "literal" },		 { "static_assert", "keyword" },
			  { "try", "keyword" },			 { "consteval", "keyword" },
			  { "Color", "keyword2" },		 { "register", "keyword" },
			  { "explicit", "keyword" },	 { "catch", "keyword" },
			  { "co_wait", "keyword" },		 { "override", "keyword" },
			  { "not", "keyword" },			 { "template", "keyword" },
			  { "int64_t", "keyword2" },	 { "wchar_t", "keyword2" },
			  { "bitor", "keyword" },		 { "thread_local", "keyword" },
			  { "uint64_t", "keyword2" },	 { "char32_t", "keyword2" },
			  { "alignas", "keyword" },		 { "export", "keyword" },

		  },
		  "//",
		  {},
		  "cpp" } );
}

}}}} // namespace EE::UI::Doc::Language
